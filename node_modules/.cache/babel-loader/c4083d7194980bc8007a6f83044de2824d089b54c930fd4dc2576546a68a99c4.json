{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n  constructor(size, localName) {\n    let name = \"bytes\" + String(size);\n    super(name, name, localName, false);\n    this.size = size;\n  }\n  defaultValue() {\n    return \"0x0000000000000000000000000000000000000000000000000000000000000000\".substring(0, 2 + this.size * 2);\n  }\n  encode(writer, value) {\n    let data = arrayify(value);\n    if (data.length !== this.size) {\n      this._throwError(\"incorrect data length\", value);\n    }\n    return writer.writeBytes(data);\n  }\n  decode(reader) {\n    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n  }\n}","map":{"version":3,"names":["arrayify","hexlify","Coder","FixedBytesCoder","constructor","size","localName","name","String","defaultValue","substring","encode","writer","value","data","length","_throwError","writeBytes","decode","reader","coerce","readBytes"],"sources":["C:\\Users\\Hubert\\Documents\\Projects\\blockchainFinal\\NFT-Whitelist-Mint\\node_modules\\@ethersproject\\abi\\src.ts\\coders\\fixed-bytes.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\r\n\r\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\r\n\r\n// @TODO: Merge this with bytes\r\nexport class FixedBytesCoder extends Coder {\r\n    readonly size: number;\r\n\r\n    constructor(size: number, localName: string) {\r\n        let name = \"bytes\" + String(size);\r\n        super(name, name, localName, false);\r\n        this.size = size;\r\n    }\r\n\r\n    defaultValue(): string {\r\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\r\n    }\r\n\r\n    encode(writer: Writer, value: BytesLike): number {\r\n        let data = arrayify(value);\r\n        if (data.length !== this.size) { this._throwError(\"incorrect data length\", value); }\r\n        return writer.writeBytes(data);\r\n    }\r\n\r\n    decode(reader: Reader): any {\r\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\r\n    }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,QAAQ,EAAaC,OAAO,QAAQ,sBAAsB;AAEnE,SAASC,KAAK,QAAwB,kBAAkB;AAExD;AACA,OAAM,MAAOC,eAAgB,SAAQD,KAAK;EAGtCE,YAAYC,IAAY,EAAEC,SAAiB;IACvC,IAAIC,IAAI,GAAG,OAAO,GAAGC,MAAM,CAACH,IAAI,CAAC;IACjC,KAAK,CAACE,IAAI,EAAEA,IAAI,EAAED,SAAS,EAAE,KAAK,CAAC;IACnC,IAAI,CAACD,IAAI,GAAGA,IAAI;EACpB;EAEAI,YAAYA,CAAA;IACR,OAAQ,oEAAoE,CAAEC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAACL,IAAI,GAAG,CAAC,CAAC;EACjH;EAEAM,MAAMA,CAACC,MAAc,EAAEC,KAAgB;IACnC,IAAIC,IAAI,GAAGd,QAAQ,CAACa,KAAK,CAAC;IAC1B,IAAIC,IAAI,CAACC,MAAM,KAAK,IAAI,CAACV,IAAI,EAAE;MAAE,IAAI,CAACW,WAAW,CAAC,uBAAuB,EAAEH,KAAK,CAAC;;IACjF,OAAOD,MAAM,CAACK,UAAU,CAACH,IAAI,CAAC;EAClC;EAEAI,MAAMA,CAACC,MAAc;IACjB,OAAOA,MAAM,CAACC,MAAM,CAAC,IAAI,CAACb,IAAI,EAAEN,OAAO,CAACkB,MAAM,CAACE,SAAS,CAAC,IAAI,CAAChB,IAAI,CAAC,CAAC,CAAC;EACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}