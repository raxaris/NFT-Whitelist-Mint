{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new AlchemyProvider(network, apiKey);\n    const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    super(url, provider.network);\n    defineReadOnly(this, \"apiKey\", provider.apiKey);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new AlchemyWebSocketProvider(network, apiKey);\n  }\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKey;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network.name) {\n      case \"homestead\":\n        host = \"eth-mainnet.alchemyapi.io/v2/\";\n        break;\n      case \"goerli\":\n        host = \"eth-goerli.g.alchemy.com/v2/\";\n        break;\n      case \"matic\":\n        host = \"polygon-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai.g.alchemy.com/v2/\";\n        break;\n      case \"arbitrum\":\n        host = \"arb-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"arbitrum-goerli\":\n        host = \"arb-goerli.g.alchemy.com/v2/\";\n        break;\n      case \"optimism\":\n        host = \"opt-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"optimism-goerli\":\n        host = \"opt-goerli.g.alchemy.com/v2/\";\n        break;\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n    return {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n        return Promise.resolve(true);\n      }\n    };\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}","map":{"version":3,"names":["defineReadOnly","showThrottleMessage","WebSocketProvider","Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyWebSocketProvider","constructor","network","apiKey","provider","AlchemyProvider","url","connection","replace","isCommunityResource","getWebSocketProvider","getApiKey","throwArgumentError","getUrl","host","name","arguments","allowGzip","throttleCallback","attempt","Promise","resolve"],"sources":["D:\\Coding\\BlockChain\\Final\\Project\\node_modules\\@ethersproject\\providers\\src.ts\\alchemy-provider.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { Network, Networkish } from \"@ethersproject/networks\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\nimport { ConnectionInfo } from \"@ethersproject/web\";\r\n\r\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\r\nimport { WebSocketProvider } from \"./websocket-provider\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\r\n\r\n// This key was provided to ethers.js by Alchemy to be used by the\r\n// default provider, but it is recommended that for your own\r\n// production environments, that you acquire your own API key at:\r\n//   https://dashboard.alchemyapi.io\r\n\r\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\r\n\r\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\r\n    readonly apiKey: string;\r\n\r\n    constructor(network?: Networkish, apiKey?: any) {\r\n        const provider = new AlchemyProvider(network, apiKey);\r\n\r\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\r\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\r\n\r\n        super(url, provider.network);\r\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.apiKey === defaultApiKey);\r\n    }\r\n}\r\n\r\nexport class AlchemyProvider extends UrlJsonRpcProvider {\r\n\r\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\r\n        return new AlchemyWebSocketProvider(network, apiKey);\r\n    }\r\n\r\n    static getApiKey(apiKey: any): any {\r\n        if (apiKey == null) { return defaultApiKey; }\r\n        if (apiKey && typeof(apiKey) !== \"string\") {\r\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\r\n        }\r\n        return apiKey;\r\n    }\r\n\r\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\r\n        let host = null;\r\n        switch (network.name) {\r\n            case \"homestead\":\r\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\r\n                break;\r\n            case \"goerli\":\r\n                host = \"eth-goerli.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"matic\":\r\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"maticmum\":\r\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"arbitrum\":\r\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"arbitrum-goerli\":\r\n                host = \"arb-goerli.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"optimism\":\r\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\r\n                break;\r\n            case \"optimism-goerli\":\r\n                host = \"opt-goerli.g.alchemy.com/v2/\"\r\n                break;\r\n            default:\r\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\r\n        }\r\n\r\n        return {\r\n            allowGzip: true,\r\n            url: (\"https:/\" + \"/\" + host + apiKey),\r\n            throttleCallback: (attempt: number, url: string) => {\r\n                if (apiKey === defaultApiKey) {\r\n                    showThrottleMessage();\r\n                }\r\n                return Promise.resolve(true);\r\n            }\r\n        };\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.apiKey === defaultApiKey);\r\n    }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAGZ,SAASA,cAAc,QAAQ,2BAA2B;AAG1D,SAA+BC,mBAAmB,QAAQ,aAAa;AACvE,SAASC,iBAAiB,QAAQ,sBAAsB;AAExD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,SAASE,kBAAkB,QAAQ,yBAAyB;AAE5D;AACA;AACA;AACA;AAEA,MAAMC,aAAa,GAAG,kCAAkC;AAExD,OAAM,MAAOC,wBAAyB,SAAQN,iBAAiB;EAG3DO,YAAYC,OAAoB,EAAEC,MAAY;IAC1C,MAAMC,QAAQ,GAAG,IAAIC,eAAe,CAACH,OAAO,EAAEC,MAAM,CAAC;IAErD,MAAMG,GAAG,GAAGF,QAAQ,CAACG,UAAU,CAACD,GAAG,CAACE,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CACvBA,OAAO,CAAC,cAAc,EAAE,iBAAiB,CAAC;IAE9E,KAAK,CAACF,GAAG,EAAEF,QAAQ,CAACF,OAAO,CAAC;IAC5BV,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEY,QAAQ,CAACD,MAAM,CAAC;EACnD;EAEAM,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACN,MAAM,KAAKJ,aAAa;EACzC;;AAGJ,OAAM,MAAOM,eAAgB,SAAQP,kBAAkB;EAEnD,OAAOY,oBAAoBA,CAACR,OAAoB,EAAEC,MAAY;IAC1D,OAAO,IAAIH,wBAAwB,CAACE,OAAO,EAAEC,MAAM,CAAC;EACxD;EAEA,OAAOQ,SAASA,CAACR,MAAW;IACxB,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAE,OAAOJ,aAAa;;IAC1C,IAAII,MAAM,IAAI,OAAOA,MAAO,KAAK,QAAQ,EAAE;MACvCN,MAAM,CAACe,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAET,MAAM,CAAC;;IAEjE,OAAOA,MAAM;EACjB;EAEA,OAAOU,MAAMA,CAACX,OAAgB,EAAEC,MAAc;IAC1C,IAAIW,IAAI,GAAG,IAAI;IACf,QAAQZ,OAAO,CAACa,IAAI;MAChB,KAAK,WAAW;QACZD,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,QAAQ;QACTA,IAAI,GAAG,8BAA8B;QACrC;MACJ,KAAK,OAAO;QACRA,IAAI,GAAG,mCAAmC;QAC1C;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,iBAAiB;QAClBA,IAAI,GAAG,8BAA8B;QACrC;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,iBAAiB;QAClBA,IAAI,GAAG,8BAA8B;QACrC;MACJ;QACGjB,MAAM,CAACe,kBAAkB,CAAC,qBAAqB,EAAE,SAAS,EAAEI,SAAS,CAAC,CAAC,CAAC,CAAC;;IAGhF,OAAO;MACHC,SAAS,EAAE,IAAI;MACfX,GAAG,EAAG,SAAS,GAAG,GAAG,GAAGQ,IAAI,GAAGX,MAAO;MACtCe,gBAAgB,EAAEA,CAACC,OAAe,EAAEb,GAAW,KAAI;QAC/C,IAAIH,MAAM,KAAKJ,aAAa,EAAE;UAC1BN,mBAAmB,EAAE;;QAEzB,OAAO2B,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;MAChC;KACH;EACL;EAEAZ,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACN,MAAM,KAAKJ,aAAa;EACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}