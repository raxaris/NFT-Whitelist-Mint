{"ast":null,"code":"\"use strict\";\n\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, TransactionDescription } from \"@ethersproject/abi\";\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\nimport * as base64 from \"@ethersproject/base64\";\nimport { Base58 as base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder, dnsEncode, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\n////////////////////////\n// Enums\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\n////////////////////////\n// Exports\nexport { AbiCoder, defaultAbiCoder, Fragment, ConstructorFragment, ErrorFragment, EventFragment, FunctionFragment, ParamType, FormatTypes, checkResultErrors, Logger, RLP, _fetchData, fetchJson, poll, checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy, arrayify, concat, stripZeros, zeroPad, isBytes, isBytesLike, defaultPath, HDNode, SigningKey, Interface, LogDescription, TransactionDescription, base58, base64, hexlify, isHexString, hexConcat, hexStripZeros, hexValue, hexZeroPad, hexDataLength, hexDataSlice, nameprep, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs, formatBytes32String, parseBytes32String, dnsEncode, hashMessage, namehash, isValidName, id, _TypedDataEncoder, getAddress, getIcapAddress, getContractAddress, getCreate2Address, isAddress, formatEther, parseEther, formatUnits, parseUnits, commify, computeHmac, keccak256, ripemd160, sha256, sha512, randomBytes, shuffled, solidityPack, solidityKeccak256, soliditySha256, splitSignature, joinSignature, accessListify, parseTransaction, serializeTransaction, TransactionTypes, getJsonWalletAddress, computeAddress, recoverAddress, computePublicKey, recoverPublicKey, verifyMessage, verifyTypedData, getAccountPath, mnemonicToEntropy, entropyToMnemonic, isValidMnemonic, mnemonicToSeed,\n////////////////////////\n// Enums\nSupportedAlgorithm, UnicodeNormalizationForm, Utf8ErrorReason, Indexed };","map":{"version":3,"names":["AbiCoder","checkResultErrors","ConstructorFragment","defaultAbiCoder","ErrorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","Indexed","Interface","LogDescription","ParamType","TransactionDescription","getAddress","getCreate2Address","getContractAddress","getIcapAddress","isAddress","base64","Base58","base58","arrayify","concat","hexConcat","hexDataSlice","hexDataLength","hexlify","hexStripZeros","hexValue","hexZeroPad","isBytes","isBytesLike","isHexString","joinSignature","zeroPad","splitSignature","stripZeros","_TypedDataEncoder","dnsEncode","hashMessage","id","isValidName","namehash","defaultPath","entropyToMnemonic","getAccountPath","HDNode","isValidMnemonic","mnemonicToEntropy","mnemonicToSeed","getJsonWalletAddress","keccak256","Logger","computeHmac","ripemd160","sha256","sha512","solidityKeccak256","pack","solidityPack","soliditySha256","randomBytes","shuffled","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","RLP","computePublicKey","recoverPublicKey","SigningKey","formatBytes32String","nameprep","parseBytes32String","_toEscapedUtf8String","toUtf8Bytes","toUtf8CodePoints","toUtf8String","Utf8ErrorFuncs","accessListify","computeAddress","parse","parseTransaction","recoverAddress","serialize","serializeTransaction","TransactionTypes","commify","formatEther","parseEther","formatUnits","parseUnits","verifyMessage","verifyTypedData","_fetchData","fetchJson","poll","SupportedAlgorithm","UnicodeNormalizationForm","Utf8ErrorReason"],"sources":["C:\\Users\\Hubert\\Documents\\Projects\\blockchainFinal\\NFT-Whitelist-Mint\\node_modules\\ethers\\src.ts\\utils.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { AbiCoder, checkResultErrors, ConstructorFragment, defaultAbiCoder, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, ParamType, Result, TransactionDescription }from \"@ethersproject/abi\";\r\nimport { getAddress, getCreate2Address, getContractAddress, getIcapAddress, isAddress } from \"@ethersproject/address\";\r\nimport * as base64 from \"@ethersproject/base64\";\r\nimport { Base58 as base58 } from \"@ethersproject/basex\";\r\nimport { arrayify, concat, hexConcat, hexDataSlice, hexDataLength, hexlify, hexStripZeros, hexValue, hexZeroPad, isBytes, isBytesLike, isHexString, joinSignature, zeroPad, splitSignature, stripZeros } from \"@ethersproject/bytes\";\r\nimport { _TypedDataEncoder, dnsEncode, hashMessage, id, isValidName, namehash } from \"@ethersproject/hash\";\r\nimport { defaultPath, entropyToMnemonic, getAccountPath, HDNode, isValidMnemonic, mnemonicToEntropy, mnemonicToSeed } from \"@ethersproject/hdnode\";\r\nimport { getJsonWalletAddress } from \"@ethersproject/json-wallets\";\r\nimport { keccak256 } from \"@ethersproject/keccak256\";\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { computeHmac, ripemd160, sha256, sha512 } from \"@ethersproject/sha2\";\r\nimport { keccak256 as solidityKeccak256, pack as solidityPack, sha256 as soliditySha256 } from \"@ethersproject/solidity\";\r\nimport { randomBytes, shuffled } from \"@ethersproject/random\";\r\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\r\nimport * as RLP from \"@ethersproject/rlp\";\r\nimport { computePublicKey, recoverPublicKey, SigningKey } from \"@ethersproject/signing-key\";\r\nimport { formatBytes32String, nameprep, parseBytes32String, _toEscapedUtf8String, toUtf8Bytes, toUtf8CodePoints, toUtf8String, Utf8ErrorFuncs } from \"@ethersproject/strings\";\r\nimport { accessListify, computeAddress, parse as parseTransaction, recoverAddress, serialize as serializeTransaction, TransactionTypes } from \"@ethersproject/transactions\";\r\nimport { commify, formatEther, parseEther, formatUnits, parseUnits } from \"@ethersproject/units\";\r\nimport { verifyMessage, verifyTypedData } from \"@ethersproject/wallet\";\r\nimport { _fetchData, fetchJson, poll } from \"@ethersproject/web\";\r\n\r\n////////////////////////\r\n// Enums\r\n\r\nimport { SupportedAlgorithm } from \"@ethersproject/sha2\";\r\nimport { UnicodeNormalizationForm, Utf8ErrorReason } from \"@ethersproject/strings\";\r\nimport { UnsignedTransaction } from \"@ethersproject/transactions\";\r\n\r\n////////////////////////\r\n// Types and Interfaces\r\n\r\nimport { CoerceFunc } from \"@ethersproject/abi\";\r\nimport { Bytes, BytesLike, Hexable } from \"@ethersproject/bytes\"\r\nimport { Mnemonic } from \"@ethersproject/hdnode\";\r\nimport { EncryptOptions, ProgressCallback } from \"@ethersproject/json-wallets\";\r\nimport { Deferrable } from \"@ethersproject/properties\";\r\nimport { Utf8ErrorFunc } from \"@ethersproject/strings\";\r\nimport { AccessList, AccessListish } from \"@ethersproject/transactions\";\r\nimport { ConnectionInfo, FetchJsonResponse, OnceBlockable, OncePollable, PollOptions } from \"@ethersproject/web\";\r\n\r\n////////////////////////\r\n// Exports\r\n\r\nexport {\r\n    AbiCoder,\r\n    defaultAbiCoder,\r\n\r\n    Fragment,\r\n    ConstructorFragment,\r\n    ErrorFragment,\r\n    EventFragment,\r\n    FunctionFragment,\r\n    ParamType,\r\n    FormatTypes,\r\n\r\n    checkResultErrors,\r\n    Result,\r\n\r\n    Logger,\r\n\r\n    RLP,\r\n\r\n    _fetchData,\r\n    fetchJson,\r\n    poll,\r\n\r\n    checkProperties,\r\n    deepCopy,\r\n    defineReadOnly,\r\n    getStatic,\r\n    resolveProperties,\r\n    shallowCopy,\r\n\r\n    arrayify,\r\n\r\n    concat,\r\n    stripZeros,\r\n    zeroPad,\r\n\r\n    isBytes,\r\n    isBytesLike,\r\n\r\n    defaultPath,\r\n    HDNode,\r\n    SigningKey,\r\n\r\n    Interface,\r\n\r\n    LogDescription,\r\n    TransactionDescription,\r\n\r\n    base58,\r\n    base64,\r\n\r\n    hexlify,\r\n    isHexString,\r\n    hexConcat,\r\n    hexStripZeros,\r\n    hexValue,\r\n    hexZeroPad,\r\n    hexDataLength,\r\n    hexDataSlice,\r\n\r\n    nameprep,\r\n    _toEscapedUtf8String,\r\n    toUtf8Bytes,\r\n    toUtf8CodePoints,\r\n    toUtf8String,\r\n    Utf8ErrorFuncs,\r\n\r\n    formatBytes32String,\r\n    parseBytes32String,\r\n\r\n    dnsEncode,\r\n    hashMessage,\r\n    namehash,\r\n    isValidName,\r\n    id,\r\n\r\n    _TypedDataEncoder,\r\n\r\n    getAddress,\r\n    getIcapAddress,\r\n    getContractAddress,\r\n    getCreate2Address,\r\n    isAddress,\r\n\r\n    formatEther,\r\n    parseEther,\r\n\r\n    formatUnits,\r\n    parseUnits,\r\n\r\n    commify,\r\n\r\n    computeHmac,\r\n    keccak256,\r\n    ripemd160,\r\n    sha256,\r\n    sha512,\r\n\r\n    randomBytes,\r\n    shuffled,\r\n\r\n    solidityPack,\r\n    solidityKeccak256,\r\n    soliditySha256,\r\n\r\n    splitSignature,\r\n    joinSignature,\r\n\r\n    accessListify,\r\n    parseTransaction,\r\n    serializeTransaction,\r\n    TransactionTypes,\r\n\r\n    getJsonWalletAddress,\r\n\r\n    computeAddress,\r\n    recoverAddress,\r\n\r\n    computePublicKey,\r\n    recoverPublicKey,\r\n\r\n    verifyMessage,\r\n    verifyTypedData,\r\n\r\n    getAccountPath,\r\n    mnemonicToEntropy,\r\n    entropyToMnemonic,\r\n    isValidMnemonic,\r\n    mnemonicToSeed,\r\n\r\n\r\n    ////////////////////////\r\n    // Enums\r\n\r\n    SupportedAlgorithm,\r\n\r\n    UnicodeNormalizationForm,\r\n    Utf8ErrorReason,\r\n\r\n    ////////////////////////\r\n    // Types\r\n\r\n    Bytes,\r\n    BytesLike,\r\n    Hexable,\r\n\r\n    AccessList,\r\n    AccessListish,\r\n    UnsignedTransaction,\r\n\r\n    CoerceFunc,\r\n\r\n    Indexed,\r\n\r\n    Mnemonic,\r\n\r\n    Deferrable,\r\n\r\n    Utf8ErrorFunc,\r\n\r\n    ConnectionInfo,\r\n    OnceBlockable,\r\n    OncePollable,\r\n    PollOptions,\r\n    FetchJsonResponse,\r\n\r\n    EncryptOptions,\r\n    ProgressCallback\r\n}\r\n\r\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,QAAQ,EAAEC,iBAAiB,EAAEC,mBAAmB,EAAEC,eAAe,EAAEC,aAAa,EAAEC,aAAa,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,OAAO,EAAEC,SAAS,EAAEC,cAAc,EAAEC,SAAS,EAAUC,sBAAsB,QAAO,oBAAoB;AAC3P,SAASC,UAAU,EAAEC,iBAAiB,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,SAAS,QAAQ,wBAAwB;AACrH,OAAO,KAAKC,MAAM,MAAM,uBAAuB;AAC/C,SAASC,MAAM,IAAIC,MAAM,QAAQ,sBAAsB;AACvD,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,YAAY,EAAEC,aAAa,EAAEC,OAAO,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAEC,WAAW,EAAEC,WAAW,EAAEC,aAAa,EAAEC,OAAO,EAAEC,cAAc,EAAEC,UAAU,QAAQ,sBAAsB;AACpO,SAASC,iBAAiB,EAAEC,SAAS,EAAEC,WAAW,EAAEC,EAAE,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,qBAAqB;AAC1G,SAASC,WAAW,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,MAAM,EAAEC,eAAe,EAAEC,iBAAiB,EAAEC,cAAc,QAAQ,uBAAuB;AAClJ,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,MAAM,QAAQ,qBAAqB;AAC5E,SAASL,SAAS,IAAIM,iBAAiB,EAAEC,IAAI,IAAIC,YAAY,EAAEJ,MAAM,IAAIK,cAAc,QAAQ,yBAAyB;AACxH,SAASC,WAAW,EAAEC,QAAQ,QAAQ,uBAAuB;AAC7D,SAASC,eAAe,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,WAAW,QAAQ,2BAA2B;AAChI,OAAO,KAAKC,GAAG,MAAM,oBAAoB;AACzC,SAASC,gBAAgB,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,4BAA4B;AAC3F,SAASC,mBAAmB,EAAEC,QAAQ,EAAEC,kBAAkB,EAAEC,oBAAoB,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,cAAc,QAAQ,wBAAwB;AAC7K,SAASC,aAAa,EAAEC,cAAc,EAAEC,KAAK,IAAIC,gBAAgB,EAAEC,cAAc,EAAEC,SAAS,IAAIC,oBAAoB,EAAEC,gBAAgB,QAAQ,6BAA6B;AAC3K,SAASC,OAAO,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;AAChG,SAASC,aAAa,EAAEC,eAAe,QAAQ,uBAAuB;AACtE,SAASC,UAAU,EAAEC,SAAS,EAAEC,IAAI,QAAQ,oBAAoB;AAEhE;AACA;AAEA,SAASC,kBAAkB,QAAQ,qBAAqB;AACxD,SAASC,wBAAwB,EAAEC,eAAe,QAAQ,wBAAwB;AAelF;AACA;AAEA,SACItG,QAAQ,EACRG,eAAe,EAEfI,QAAQ,EACRL,mBAAmB,EACnBE,aAAa,EACbC,aAAa,EACbG,gBAAgB,EAChBI,SAAS,EACTN,WAAW,EAEXL,iBAAiB,EAGjBoD,MAAM,EAENiB,GAAG,EAEH2B,UAAU,EACVC,SAAS,EACTC,IAAI,EAEJnC,eAAe,EACfC,QAAQ,EACRC,cAAc,EACdC,SAAS,EACTC,iBAAiB,EACjBC,WAAW,EAEX/C,QAAQ,EAERC,MAAM,EACNc,UAAU,EACVF,OAAO,EAEPJ,OAAO,EACPC,WAAW,EAEXY,WAAW,EACXG,MAAM,EACN0B,UAAU,EAEV/D,SAAS,EAETC,cAAc,EACdE,sBAAsB,EAEtBQ,MAAM,EACNF,MAAM,EAENQ,OAAO,EACPM,WAAW,EACXT,SAAS,EACTI,aAAa,EACbC,QAAQ,EACRC,UAAU,EACVJ,aAAa,EACbD,YAAY,EAEZkD,QAAQ,EACRE,oBAAoB,EACpBC,WAAW,EACXC,gBAAgB,EAChBC,YAAY,EACZC,cAAc,EAEdP,mBAAmB,EACnBE,kBAAkB,EAElBrC,SAAS,EACTC,WAAW,EACXG,QAAQ,EACRD,WAAW,EACXD,EAAE,EAEFH,iBAAiB,EAEjBxB,UAAU,EACVG,cAAc,EACdD,kBAAkB,EAClBD,iBAAiB,EACjBG,SAAS,EAETyE,WAAW,EACXC,UAAU,EAEVC,WAAW,EACXC,UAAU,EAEVJ,OAAO,EAEPpC,WAAW,EACXF,SAAS,EACTG,SAAS,EACTC,MAAM,EACNC,MAAM,EAENK,WAAW,EACXC,QAAQ,EAERH,YAAY,EACZF,iBAAiB,EACjBG,cAAc,EAEdzB,cAAc,EACdF,aAAa,EAEbgD,aAAa,EACbG,gBAAgB,EAChBG,oBAAoB,EACpBC,gBAAgB,EAEhBtC,oBAAoB,EAEpBgC,cAAc,EACdG,cAAc,EAEdf,gBAAgB,EAChBC,gBAAgB,EAEhBuB,aAAa,EACbC,eAAe,EAEflD,cAAc,EACdG,iBAAiB,EACjBJ,iBAAiB,EACjBG,eAAe,EACfE,cAAc;AAGd;AACA;AAEAkD,kBAAkB,EAElBC,wBAAwB,EACxBC,eAAe,EAef7F,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}