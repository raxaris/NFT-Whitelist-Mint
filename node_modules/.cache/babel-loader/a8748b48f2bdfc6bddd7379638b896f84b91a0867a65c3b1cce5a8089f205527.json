{"ast":null,"code":"\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n  return \"0x\" + hash.ripemd160().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha512(data) {\n  return \"0x\" + hash.sha512().update(arrayify(data)).digest(\"hex\");\n}\nexport function computeHmac(algorithm, key, data) {\n  if (!SupportedAlgorithm[algorithm]) {\n    logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"hmac\",\n      algorithm: algorithm\n    });\n  }\n  return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}","map":{"version":3,"names":["hash","arrayify","SupportedAlgorithm","Logger","version","logger","ripemd160","data","update","digest","sha256","sha512","computeHmac","algorithm","key","throwError","errors","UNSUPPORTED_OPERATION","operation","hmac"],"sources":["C:\\Users\\Hubert\\Documents\\Projects\\blockchainFinal\\NFT-Whitelist-Mint\\node_modules\\@ethersproject\\sha2\\src.ts\\browser-sha2.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport hash from \"hash.js\";\r\n//const _ripemd160 = _hash.ripemd160;\r\n\r\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\r\n\r\nimport { SupportedAlgorithm } from \"./types\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nexport function ripemd160(data: BytesLike): string {\r\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\r\n}\r\n\r\nexport function sha256(data: BytesLike): string {\r\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\r\n}\r\n\r\nexport function sha512(data: BytesLike): string {\r\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\r\n}\r\n\r\nexport function computeHmac(algorithm: SupportedAlgorithm, key: BytesLike, data: BytesLike): string {\r\n    if (!SupportedAlgorithm[algorithm]) {\r\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"hmac\",\r\n            algorithm: algorithm\r\n        });\r\n    }\r\n\r\n    return \"0x\" + hash.hmac((<any>hash)[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\r\n}\r\n\r\n"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,IAAI,MAAM,SAAS;AAC1B;AAEA,SAASC,QAAQ,QAAmB,sBAAsB;AAE1D,SAASC,kBAAkB,QAAQ,SAAS;AAE5C,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,OAAM,SAAUE,SAASA,CAACC,IAAe;EACrC,OAAO,IAAI,GAAIP,IAAI,CAACM,SAAS,EAAE,CAACE,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,KAAK,CAAE;AACzE;AAEA,OAAM,SAAUC,MAAMA,CAACH,IAAe;EAClC,OAAO,IAAI,GAAIP,IAAI,CAACU,MAAM,EAAE,CAACF,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,KAAK,CAAE;AACtE;AAEA,OAAM,SAAUE,MAAMA,CAACJ,IAAe;EAClC,OAAO,IAAI,GAAIP,IAAI,CAACW,MAAM,EAAE,CAACH,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,KAAK,CAAE;AACtE;AAEA,OAAM,SAAUG,WAAWA,CAACC,SAA6B,EAAEC,GAAc,EAAEP,IAAe;EACtF,IAAI,CAACL,kBAAkB,CAACW,SAAS,CAAC,EAAE;IAChCR,MAAM,CAACU,UAAU,CAAC,wBAAwB,GAAGF,SAAS,EAAEV,MAAM,CAACa,MAAM,CAACC,qBAAqB,EAAE;MACzFC,SAAS,EAAE,MAAM;MACjBL,SAAS,EAAEA;KACd,CAAC;;EAGN,OAAO,IAAI,GAAGb,IAAI,CAACmB,IAAI,CAAOnB,IAAK,CAACa,SAAS,CAAC,EAAEZ,QAAQ,CAACa,GAAG,CAAC,CAAC,CAACN,MAAM,CAACP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACE,MAAM,CAAC,KAAK,CAAC;AACvG"},"metadata":{},"sourceType":"module","externalDependencies":[]}