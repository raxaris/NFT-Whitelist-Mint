{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\r\n *  Notes:\r\n *\r\n *  This provider differs a bit from the polling providers. One main\r\n *  difference is how it handles consistency. The polling providers\r\n *  will stall responses to ensure a consistent state, while this\r\n *  WebSocket provider assumes the connected backend will manage this.\r\n *\r\n *  For example, if a polling provider emits an event which indicates\r\n *  the event occurred in blockhash XXX, a call to fetch that block by\r\n *  its hash XXX, if not present will retry until it is present. This\r\n *  can occur when querying a pool of nodes that are mildly out of sync\r\n *  with each other.\r\n */\nlet NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nexport class WebSocketProvider extends JsonRpcProvider {\n  constructor(url, network) {\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n    if (typeof url === \"string\") {\n      super(url, network);\n    } else {\n      super(\"_websocket\", network);\n    }\n    this._pollingInterval = -1;\n    this._wsReady = false;\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n    } else {\n      defineReadOnly(this, \"_websocket\", url);\n    }\n    defineReadOnly(this, \"_requests\", {});\n    defineReadOnly(this, \"_subs\", {});\n    defineReadOnly(this, \"_subIds\", {});\n    defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n    // Stall sending requests until the socket is open...\n    this.websocket.onopen = () => {\n      this._wsReady = true;\n      Object.keys(this._requests).forEach(id => {\n        this.websocket.send(this._requests[id].payload);\n      });\n    };\n    this.websocket.onmessage = messageEvent => {\n      const data = messageEvent.data;\n      const result = JSON.parse(data);\n      if (result.id != null) {\n        const id = String(result.id);\n        const request = this._requests[id];\n        delete this._requests[id];\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: this\n          });\n        } else {\n          let error = null;\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n          request.callback(error, undefined);\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: this\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        const sub = this._subs[result.params.subscription];\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    };\n    // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n    const fauxPoll = setInterval(() => {\n      this.emit(\"poll\");\n    }, 1000);\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n  }\n  // Cannot narrow the type of _websocket, as that is not backwards compatible\n  // so we add a getter and let the WebSocket be a public API.\n  get websocket() {\n    return this._websocket;\n  }\n  detectNetwork() {\n    return this._detectNetwork;\n  }\n  get pollingInterval() {\n    return 0;\n  }\n  resetEventsBlock(blockNumber) {\n    logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"resetEventBlock\"\n    });\n  }\n  set pollingInterval(value) {\n    logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPollingInterval\"\n    });\n  }\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return null;\n    });\n  }\n  set polling(value) {\n    if (!value) {\n      return;\n    }\n    logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPolling\"\n    });\n  }\n  send(method, params) {\n    const rid = NextId++;\n    return new Promise((resolve, reject) => {\n      function callback(error, result) {\n        if (error) {\n          return reject(error);\n        }\n        return resolve(result);\n      }\n      const payload = JSON.stringify({\n        method: method,\n        params: params,\n        id: rid,\n        jsonrpc: \"2.0\"\n      });\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: JSON.parse(payload),\n        provider: this\n      });\n      this._requests[String(rid)] = {\n        callback,\n        payload\n      };\n      if (this._wsReady) {\n        this.websocket.send(payload);\n      }\n    });\n  }\n  static defaultUrl() {\n    return \"ws:/\\/localhost:8546\";\n  }\n  _subscribe(tag, param, processFunc) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let subIdPromise = this._subIds[tag];\n      if (subIdPromise == null) {\n        subIdPromise = Promise.all(param).then(param => {\n          return this.send(\"eth_subscribe\", param);\n        });\n        this._subIds[tag] = subIdPromise;\n      }\n      const subId = yield subIdPromise;\n      this._subs[subId] = {\n        tag,\n        processFunc\n      };\n    });\n  }\n  _startEvent(event) {\n    switch (event.type) {\n      case \"block\":\n        this._subscribe(\"block\", [\"newHeads\"], result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit(\"block\", blockNumber);\n        });\n        break;\n      case \"pending\":\n        this._subscribe(\"pending\", [\"newPendingTransactions\"], result => {\n          this.emit(\"pending\", result);\n        });\n        break;\n      case \"filter\":\n        this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n          this.emit(event.filter, this.formatter.filterLog(result));\n        });\n        break;\n      case \"tx\":\n        {\n          const emitReceipt = event => {\n            const hash = event.hash;\n            this.getTransactionReceipt(hash).then(receipt => {\n              if (!receipt) {\n                return;\n              }\n              this.emit(hash, receipt);\n            });\n          };\n          // In case it is already mined\n          emitReceipt(event);\n          // To keep things simple, we start up a single newHeads subscription\n          // to keep an eye out for transactions we are watching for.\n          // Starting a subscription for an event (i.e. \"tx\") that is already\n          // running is (basically) a nop.\n          this._subscribe(\"tx\", [\"newHeads\"], result => {\n            this._events.filter(e => e.type === \"tx\").forEach(emitReceipt);\n          });\n          break;\n        }\n      // Nothing is needed\n      case \"debug\":\n      case \"poll\":\n      case \"willPoll\":\n      case \"didPoll\":\n      case \"error\":\n        break;\n      default:\n        console.log(\"unhandled:\", event);\n        break;\n    }\n  }\n  _stopEvent(event) {\n    let tag = event.tag;\n    if (event.type === \"tx\") {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === \"tx\").length) {\n        return;\n      }\n      tag = \"tx\";\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n    const subId = this._subIds[tag];\n    if (!subId) {\n      return;\n    }\n    delete this._subIds[tag];\n    subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n      delete this._subs[subId];\n      this.send(\"eth_unsubscribe\", [subId]);\n    });\n  }\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Wait until we have connected before trying to disconnect\n      if (this.websocket.readyState === WebSocket.CONNECTING) {\n        yield new Promise(resolve => {\n          this.websocket.onopen = function () {\n            resolve(true);\n          };\n          this.websocket.onerror = function () {\n            resolve(false);\n          };\n        });\n      }\n      // Hangup\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n      this.websocket.close(1000);\n    });\n  }\n}","map":{"version":3,"names":["BigNumber","defineReadOnly","JsonRpcProvider","WebSocket","Logger","version","logger","NextId","WebSocketProvider","constructor","url","network","throwError","errors","UNSUPPORTED_OPERATION","operation","_pollingInterval","_wsReady","connection","detectNetwork","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","error","Error","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","pollingInterval","resetEventsBlock","blockNumber","value","poll","polling","rid","Promise","resolve","reject","stringify","jsonrpc","defaultUrl","_subscribe","tag","param","subIdPromise","_subIds","all","then","subId","_startEvent","event","type","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","_stopEvent","length","listenerCount","destroy","readyState","CONNECTING","onerror","close"],"sources":["D:\\Coding\\BlockChain\\Final\\Project\\node_modules\\@ethersproject\\providers\\src.ts\\websocket-provider.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\nimport { Network, Networkish } from \"@ethersproject/networks\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\n\r\nimport { Event } from \"./base-provider\";\r\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\r\nimport { WebSocket } from \"./ws\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\n/**\r\n *  Notes:\r\n *\r\n *  This provider differs a bit from the polling providers. One main\r\n *  difference is how it handles consistency. The polling providers\r\n *  will stall responses to ensure a consistent state, while this\r\n *  WebSocket provider assumes the connected backend will manage this.\r\n *\r\n *  For example, if a polling provider emits an event which indicates\r\n *  the event occurred in blockhash XXX, a call to fetch that block by\r\n *  its hash XXX, if not present will retry until it is present. This\r\n *  can occur when querying a pool of nodes that are mildly out of sync\r\n *  with each other.\r\n */\r\n\r\nlet NextId = 1;\r\n\r\nexport type InflightRequest = {\r\n     callback: (error: Error, result: any) => void;\r\n     payload: string;\r\n};\r\n\r\nexport type Subscription = {\r\n    tag: string;\r\n    processFunc: (payload: any) => void;\r\n};\r\n\r\nexport interface WebSocketLike {\r\n    onopen: ((...args: Array<any>) => any) | null;\r\n    onmessage: ((...args: Array<any>) => any) | null;\r\n    onerror: ((...args: Array<any>) => any) | null;\r\n\r\n    readyState: number;\r\n\r\n    send(payload: any): void;\r\n    close(code?: number, reason?: string): void;\r\n}\r\n\r\n// For more info about the Real-time Event API see:\r\n//   https://geth.ethereum.org/docs/rpc/pubsub\r\n\r\nexport class WebSocketProvider extends JsonRpcProvider {\r\n    readonly _websocket: any;\r\n    readonly _requests: { [ name: string ]: InflightRequest };\r\n    readonly _detectNetwork: Promise<Network>;\r\n\r\n    // Maps event tag to subscription ID (we dedupe identical events)\r\n    readonly _subIds: { [ tag: string ]: Promise<string> };\r\n\r\n    // Maps Subscription ID to Subscription\r\n    readonly _subs: { [ name: string ]: Subscription };\r\n\r\n    _wsReady: boolean;\r\n\r\n    constructor(url: string | WebSocketLike, network?: Networkish) {\r\n\r\n        // This will be added in the future; please open an issue to expedite\r\n        if (network === \"any\") {\r\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"network:any\"\r\n            });\r\n        }\r\n\r\n        if (typeof(url) === \"string\") {\r\n            super(url, network);\r\n        } else {\r\n            super(\"_websocket\", network);\r\n        }\r\n\r\n        this._pollingInterval = -1;\r\n\r\n        this._wsReady = false;\r\n\r\n        if (typeof(url) === \"string\") {\r\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\r\n        } else {\r\n            defineReadOnly(this, \"_websocket\", url);\r\n        }\r\n\r\n        defineReadOnly(this, \"_requests\", { });\r\n        defineReadOnly(this, \"_subs\", { });\r\n        defineReadOnly(this, \"_subIds\", { });\r\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\r\n\r\n        // Stall sending requests until the socket is open...\r\n        this.websocket.onopen = () => {\r\n            this._wsReady = true;\r\n            Object.keys(this._requests).forEach((id) => {\r\n                this.websocket.send(this._requests[id].payload);\r\n            });\r\n        };\r\n\r\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\r\n            const data = messageEvent.data;\r\n            const result = JSON.parse(data);\r\n            if (result.id != null) {\r\n                const id = String(result.id);\r\n                const request = this._requests[id];\r\n                delete this._requests[id];\r\n\r\n                if (result.result !== undefined) {\r\n                    request.callback(null, result.result);\r\n\r\n                    this.emit(\"debug\", {\r\n                        action: \"response\",\r\n                        request: JSON.parse(request.payload),\r\n                        response: result.result,\r\n                        provider: this\r\n                    });\r\n\r\n                } else {\r\n                    let error: Error = null;\r\n                    if (result.error) {\r\n                        error = new Error(result.error.message || \"unknown error\");\r\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\r\n                        defineReadOnly(<any>error, \"response\", data);\r\n                    } else {\r\n                        error = new Error(\"unknown error\");\r\n                    }\r\n\r\n                    request.callback(error, undefined);\r\n\r\n                    this.emit(\"debug\", {\r\n                        action: \"response\",\r\n                        error: error,\r\n                        request: JSON.parse(request.payload),\r\n                        provider: this\r\n                    });\r\n\r\n                }\r\n\r\n            } else if (result.method === \"eth_subscription\") {\r\n                // Subscription...\r\n                const sub = this._subs[result.params.subscription];\r\n                if (sub) {\r\n                    //this.emit.apply(this,                  );\r\n                    sub.processFunc(result.params.result)\r\n                }\r\n\r\n            } else {\r\n                console.warn(\"this should not happen\");\r\n            }\r\n        };\r\n\r\n        // This Provider does not actually poll, but we want to trigger\r\n        // poll events for things that depend on them (like stalling for\r\n        // block and transaction lookups)\r\n        const fauxPoll = setInterval(() => {\r\n            this.emit(\"poll\");\r\n        }, 1000);\r\n        if (fauxPoll.unref) { fauxPoll.unref(); }\r\n    }\r\n\r\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\r\n    // so we add a getter and let the WebSocket be a public API.\r\n    get websocket(): WebSocketLike { return this._websocket; }\r\n\r\n    detectNetwork(): Promise<Network> {\r\n        return this._detectNetwork;\r\n    }\r\n\r\n    get pollingInterval(): number {\r\n        return 0;\r\n    }\r\n\r\n    resetEventsBlock(blockNumber: number): void {\r\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"resetEventBlock\"\r\n        });\r\n    }\r\n\r\n    set pollingInterval(value: number) {\r\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"setPollingInterval\"\r\n        });\r\n    }\r\n\r\n    async poll(): Promise<void> {\r\n        return null;\r\n    }\r\n\r\n    set polling(value: boolean) {\r\n        if (!value) { return; }\r\n\r\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n            operation: \"setPolling\"\r\n        });\r\n    }\r\n\r\n    send(method: string, params?: Array<any>): Promise<any> {\r\n        const rid = NextId++;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            function callback(error: Error, result: any) {\r\n                if (error) { return reject(error); }\r\n                return resolve(result);\r\n            }\r\n\r\n            const payload = JSON.stringify({\r\n                method: method,\r\n                params: params,\r\n                id: rid,\r\n                jsonrpc: \"2.0\"\r\n            });\r\n\r\n            this.emit(\"debug\", {\r\n                action: \"request\",\r\n                request: JSON.parse(payload),\r\n                provider: this\r\n            });\r\n\r\n            this._requests[String(rid)] = { callback, payload };\r\n\r\n            if (this._wsReady) { this.websocket.send(payload); }\r\n        });\r\n    }\r\n\r\n    static defaultUrl(): string {\r\n        return \"ws:/\\/localhost:8546\";\r\n    }\r\n\r\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\r\n        let subIdPromise = this._subIds[tag];\r\n        if (subIdPromise == null) {\r\n            subIdPromise = Promise.all(param).then((param) => {\r\n                return this.send(\"eth_subscribe\", param);\r\n            });\r\n            this._subIds[tag] = subIdPromise;\r\n        }\r\n        const subId = await subIdPromise;\r\n        this._subs[subId] = { tag, processFunc };\r\n    }\r\n\r\n    _startEvent(event: Event): void {\r\n        switch (event.type) {\r\n            case \"block\":\r\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\r\n                    const blockNumber = BigNumber.from(result.number).toNumber();\r\n                    this._emitted.block = blockNumber;\r\n                    this.emit(\"block\", blockNumber);\r\n                });\r\n                break;\r\n\r\n            case \"pending\":\r\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\r\n                    this.emit(\"pending\", result);\r\n                });\r\n                break;\r\n\r\n            case \"filter\":\r\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\r\n                    if (result.removed == null) { result.removed = false; }\r\n                    this.emit(event.filter, this.formatter.filterLog(result));\r\n                });\r\n                break;\r\n\r\n            case \"tx\": {\r\n                const emitReceipt = (event: Event) => {\r\n                    const hash = event.hash;\r\n                    this.getTransactionReceipt(hash).then((receipt) => {\r\n                        if (!receipt) { return; }\r\n                        this.emit(hash, receipt);\r\n                    });\r\n                };\r\n\r\n                // In case it is already mined\r\n                emitReceipt(event);\r\n\r\n                // To keep things simple, we start up a single newHeads subscription\r\n                // to keep an eye out for transactions we are watching for.\r\n                // Starting a subscription for an event (i.e. \"tx\") that is already\r\n                // running is (basically) a nop.\r\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\r\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\r\n                });\r\n                break;\r\n            }\r\n\r\n            // Nothing is needed\r\n            case \"debug\":\r\n            case \"poll\":\r\n            case \"willPoll\":\r\n            case \"didPoll\":\r\n            case \"error\":\r\n                break;\r\n\r\n            default:\r\n                console.log(\"unhandled:\", event);\r\n                break;\r\n        }\r\n    }\r\n\r\n    _stopEvent(event: Event): void {\r\n        let tag = event.tag;\r\n\r\n        if (event.type === \"tx\") {\r\n            // There are remaining transaction event listeners\r\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\r\n                return;\r\n            }\r\n            tag = \"tx\";\r\n        } else if (this.listenerCount(event.event)) {\r\n            // There are remaining event listeners\r\n            return;\r\n        }\r\n\r\n        const subId = this._subIds[tag];\r\n        if (!subId) { return; }\r\n\r\n       delete this._subIds[tag];\r\n       subId.then((subId) => {\r\n            if (!this._subs[subId]) { return; }\r\n            delete this._subs[subId];\r\n            this.send(\"eth_unsubscribe\", [ subId ]);\r\n        });\r\n    }\r\n\r\n    async destroy(): Promise<void> {\r\n        // Wait until we have connected before trying to disconnect\r\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\r\n            await (new Promise((resolve) => {\r\n                this.websocket.onopen = function() {\r\n                    resolve(true);\r\n                };\r\n\r\n                this.websocket.onerror = function() {\r\n                    resolve(false);\r\n                };\r\n            }));\r\n        }\r\n\r\n        // Hangup\r\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\r\n        this.websocket.close(1000);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}