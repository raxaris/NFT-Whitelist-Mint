{"ast":null,"code":"\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n  constructor(locale) {\n    logger.checkAbstract(new.target, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  }\n  // Subclasses may override this\n  split(mnemonic) {\n    return mnemonic.toLowerCase().split(/ +/g);\n  }\n  // Subclasses may override this\n  join(words) {\n    return words.join(\" \");\n  }\n  static check(wordlist) {\n    const words = [];\n    for (let i = 0; i < 2048; i++) {\n      const word = wordlist.getWord(i);\n      /* istanbul ignore if */\n      if (i !== wordlist.getWordIndex(word)) {\n        return \"0x\";\n      }\n      words.push(word);\n    }\n    return id(words.join(\"\\n\") + \"\\n\");\n  }\n  static register(lang, name) {\n    if (!name) {\n      name = lang.locale;\n    }\n    /* istanbul ignore if */\n    if (exportWordlist) {\n      try {\n        const anyGlobal = window;\n        if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n          if (!anyGlobal._ethers.wordlists[name]) {\n            defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n          }\n        }\n      } catch (error) {}\n    }\n  }\n}","map":{"version":3,"names":["exportWordlist","id","defineReadOnly","Logger","version","logger","Wordlist","constructor","locale","checkAbstract","new","target","split","mnemonic","toLowerCase","join","words","check","wordlist","i","word","getWord","getWordIndex","push","register","lang","name","anyGlobal","window","_ethers","wordlists","error"],"sources":["D:\\Coding\\BlockChain\\Final\\projectnew\\node_modules\\@ethersproject\\wordlists\\src.ts\\wordlist.ts"],"sourcesContent":["\"use strict\";\r\n\r\n// This gets overridden by rollup\r\nconst exportWordlist = false;\r\n\r\nimport { id } from \"@ethersproject/hash\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nexport const logger = new Logger(version);\r\n\r\nexport abstract class Wordlist {\r\n    readonly locale: string;\r\n\r\n    constructor(locale: string) {\r\n        logger.checkAbstract(new.target, Wordlist);\r\n        defineReadOnly(this, \"locale\", locale);\r\n    }\r\n\r\n    abstract getWord(index: number): string;\r\n    abstract getWordIndex(word: string): number;\r\n\r\n    // Subclasses may override this\r\n    split(mnemonic: string): Array<string> {\r\n        return mnemonic.toLowerCase().split(/ +/g)\r\n    }\r\n\r\n    // Subclasses may override this\r\n    join(words: Array<string>): string {\r\n        return words.join(\" \");\r\n    }\r\n\r\n    static check(wordlist: Wordlist): string {\r\n        const words = [];\r\n        for (let i = 0; i < 2048; i++) {\r\n            const word = wordlist.getWord(i);\r\n            /* istanbul ignore if */\r\n            if (i !== wordlist.getWordIndex(word)) { return \"0x\"; }\r\n            words.push(word);\r\n        }\r\n        return id(words.join(\"\\n\") + \"\\n\");\r\n    }\r\n\r\n    static register(lang: Wordlist, name?: string): void {\r\n        if (!name) { name = lang.locale; }\r\n\r\n        /* istanbul ignore if */\r\n        if (exportWordlist) {\r\n            try {\r\n                const anyGlobal = (window as any)\r\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\r\n                    if (!anyGlobal._ethers.wordlists[name]) {\r\n                         defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\r\n                    }\r\n                }\r\n            } catch (error) { }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,MAAMA,cAAc,GAAG,KAAK;AAE5B,SAASC,EAAE,QAAQ,qBAAqB;AACxC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAO,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAEzC,OAAM,MAAgBE,QAAQ;EAG1BC,YAAYC,MAAc;IACtBH,MAAM,CAACI,aAAa,CAACC,GAAG,CAACC,MAAM,EAAEL,QAAQ,CAAC;IAC1CJ,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEM,MAAM,CAAC;EAC1C;EAKA;EACAI,KAAKA,CAACC,QAAgB;IAClB,OAAOA,QAAQ,CAACC,WAAW,EAAE,CAACF,KAAK,CAAC,KAAK,CAAC;EAC9C;EAEA;EACAG,IAAIA,CAACC,KAAoB;IACrB,OAAOA,KAAK,CAACD,IAAI,CAAC,GAAG,CAAC;EAC1B;EAEA,OAAOE,KAAKA,CAACC,QAAkB;IAC3B,MAAMF,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAO,CAACF,CAAC,CAAC;MAChC;MACA,IAAIA,CAAC,KAAKD,QAAQ,CAACI,YAAY,CAACF,IAAI,CAAC,EAAE;QAAE,OAAO,IAAI;;MACpDJ,KAAK,CAACO,IAAI,CAACH,IAAI,CAAC;;IAEpB,OAAOnB,EAAE,CAACe,KAAK,CAACD,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;EACtC;EAEA,OAAOS,QAAQA,CAACC,IAAc,EAAEC,IAAa;IACzC,IAAI,CAACA,IAAI,EAAE;MAAEA,IAAI,GAAGD,IAAI,CAACjB,MAAM;;IAE/B;IACA,IAAIR,cAAc,EAAE;MAChB,IAAI;QACA,MAAM2B,SAAS,GAAIC,MAAc;QACjC,IAAID,SAAS,CAACE,OAAO,IAAIF,SAAS,CAACE,OAAO,CAACC,SAAS,EAAE;UAClD,IAAI,CAACH,SAAS,CAACE,OAAO,CAACC,SAAS,CAACJ,IAAI,CAAC,EAAE;YACnCxB,cAAc,CAACyB,SAAS,CAACE,OAAO,CAACC,SAAS,EAAEJ,IAAI,EAAED,IAAI,CAAC;;;OAGnE,CAAC,OAAOM,KAAK,EAAE;;EAExB"},"metadata":{},"sourceType":"module","externalDependencies":[]}