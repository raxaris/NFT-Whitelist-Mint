{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class ErrorDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n}\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\r\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\r\n    params.reduce((accum, param) => {\r\n        if (param.name) {\r\n            if (accum[param.name]) {\r\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\r\n            }\r\n            accum[param.name] = true;\r\n        }\r\n        return accum;\r\n    }, <{ [ name: string ]: boolean }>{ });\r\n}\r\n*/\nexport class Interface {\n  constructor(fragments) {\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n        case \"error\":\n          bucket = this.errors;\n          break;\n        default:\n          return;\n      }\n      let signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n    const abi = this.fragments.map(fragment => fragment.format(format));\n    // We need to re-bundle the JSON fragments a bit\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n    return abi;\n  }\n  // Sub-classes can override these to handle other blockchains\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n  static getAddress(address) {\n    return getAddress(address);\n  }\n  static getSighash(fragment) {\n    return hexDataSlice(id(fragment.format()), 0, 4);\n  }\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n      return this.functions[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n      return this.events[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n    return result;\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getError(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      const getSighash = getStatic(this.constructor, \"getSighash\");\n      for (const name in this.errors) {\n        const error = this.errors[name];\n        if (nameOrSignatureOrSighash === getSighash(error)) {\n          return this.errors[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.errors).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching error\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n      }\n      return this.errors[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  getSighash(fragment) {\n    if (typeof fragment === \"string\") {\n      try {\n        fragment = this.getFunction(fragment);\n      } catch (error) {\n        try {\n          fragment = this.getError(fragment);\n        } catch (_) {\n          throw error;\n        }\n      }\n    }\n    return getStatic(this.constructor, \"getSighash\")(fragment);\n  }\n  // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(fragment.inputs, bytes.slice(4));\n  }\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n  }\n  // Decode the data for a function call (e.g. tx.data)\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  }\n  // Encode the data for a function call (e.g. tx.data)\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  }\n  // Decode the result from a function call (e.g. from eth_call)\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    let bytes = arrayify(data);\n    let reason = null;\n    let message = \"\";\n    let errorArgs = null;\n    let errorName = null;\n    let errorSignature = null;\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n        break;\n      case 4:\n        {\n          const selector = hexlify(bytes.slice(0, 4));\n          const builtin = BuiltinErrors[selector];\n          if (builtin) {\n            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n            errorName = builtin.name;\n            errorSignature = builtin.signature;\n            if (builtin.reason) {\n              reason = errorArgs[0];\n            }\n            if (errorName === \"Error\") {\n              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n            } else if (errorName === \"Panic\") {\n              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n            }\n          } else {\n            try {\n              const error = this.getError(selector);\n              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n              errorName = error.name;\n              errorSignature = error.format();\n            } catch (error) {}\n          }\n          break;\n        }\n    }\n    return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      data: hexlify(data),\n      errorArgs,\n      errorName,\n      errorSignature,\n      reason\n    });\n  }\n  // Encode the result for a function call (e.g. for eth_call)\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  }\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n    let topics = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n      if (param.type === \"bool\" && typeof value === \"boolean\") {\n        value = value ? \"0x01\" : \"0x00\";\n      }\n      if (param.type.match(/^u?int/)) {\n        value = BigNumber.from(value).toHexString();\n      }\n      // Check addresses are valid\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n      return hexZeroPad(hexlify(value), 32);\n    };\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n      topics = topics.slice(1);\n    }\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n    let result = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      }\n      // Add the keyword argument if named and safe\n      if (param.name && result[param.name] == null) {\n        const value = result[index];\n        // Make error named values throw on access\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            enumerable: true,\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    });\n    // Make all error indexed values throw on access\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          enumerable: true,\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n    return Object.freeze(result);\n  }\n  // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  }\n  // @TODO\n  //parseCallResult(data: BytesLike): ??\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  parseError(data) {\n    const hexData = hexlify(data);\n    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new ErrorDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n      errorFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment)\n    });\n  }\n  /*\r\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\r\n      if (Interface.isInterface(value)) {\r\n          return value;\r\n      }\r\n      if (typeof(value) === \"string\") {\r\n          return new Interface(JSON.parse(value));\r\n      }\r\n      return new Interface(value);\r\n  }\r\n  */\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n}","map":{"version":3,"names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","ErrorDescription","Indexed","isIndexed","value","_isIndexed","BuiltinErrors","signature","name","inputs","reason","wrapAccessError","property","error","wrap","Error","Interface","constructor","fragments","abi","JSON","parse","map","fragment","from","filter","new","target","forEach","bucket","type","deploy","warn","functions","events","errors","format","payable","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","address","getSighash","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getError","_","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeErrorResult","bytes","slice","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","message","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","match","toHexString","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","parseError","hexData","errorFragment","isInterface","_isInterface"],"sources":["C:\\Users\\Hubert\\Documents\\Projects\\blockchainFinal\\NFT-Whitelist-Mint\\node_modules\\@ethersproject\\abi\\src.ts\\interface.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { getAddress } from \"@ethersproject/address\";\r\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\r\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\r\nimport { id } from \"@ethersproject/hash\";\r\nimport { keccak256 } from \"@ethersproject/keccak256\"\r\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\r\n\r\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\r\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\r\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nexport { checkResultErrors, Result };\r\n\r\nexport class LogDescription extends Description<LogDescription> {\r\n    readonly eventFragment: EventFragment;\r\n    readonly name: string;\r\n    readonly signature: string;\r\n    readonly topic: string;\r\n    readonly args: Result\r\n}\r\n\r\nexport class TransactionDescription extends Description<TransactionDescription> {\r\n    readonly functionFragment: FunctionFragment;\r\n    readonly name: string;\r\n    readonly args: Result;\r\n    readonly signature: string;\r\n    readonly sighash: string;\r\n    readonly value: BigNumber;\r\n}\r\n\r\nexport class ErrorDescription extends Description<ErrorDescription> {\r\n    readonly errorFragment: ErrorFragment;\r\n    readonly name: string;\r\n    readonly args: Result;\r\n    readonly signature: string;\r\n    readonly sighash: string;\r\n}\r\n\r\nexport class Indexed extends Description<Indexed> {\r\n    readonly hash: string;\r\n    readonly _isIndexed: boolean;\r\n\r\n    static isIndexed(value: any): value is Indexed {\r\n        return !!(value && value._isIndexed);\r\n    }\r\n}\r\n\r\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\r\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\r\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\r\n}\r\n\r\nfunction wrapAccessError(property: string, error: Error): Error {\r\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\r\n    (<any>wrap).error = error;\r\n    return wrap;\r\n}\r\n\r\n/*\r\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\r\n    params.reduce((accum, param) => {\r\n        if (param.name) {\r\n            if (accum[param.name]) {\r\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\r\n            }\r\n            accum[param.name] = true;\r\n        }\r\n        return accum;\r\n    }, <{ [ name: string ]: boolean }>{ });\r\n}\r\n*/\r\nexport class Interface {\r\n    readonly fragments: ReadonlyArray<Fragment>;\r\n\r\n    readonly errors: { [ name: string ]: ErrorFragment };\r\n    readonly events: { [ name: string ]: EventFragment };\r\n    readonly functions: { [ name: string ]: FunctionFragment };\r\n    readonly structs: { [ name: string ]: any };\r\n\r\n    readonly deploy: ConstructorFragment;\r\n\r\n    readonly _abiCoder: AbiCoder;\r\n\r\n    readonly _isInterface: boolean;\r\n\r\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\r\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\r\n        if (typeof(fragments) === \"string\") {\r\n            abi = JSON.parse(fragments);\r\n        } else {\r\n            abi = fragments;\r\n        }\r\n\r\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\r\n            return Fragment.from(fragment);\r\n        }).filter((fragment) => (fragment != null)));\r\n\r\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\r\n\r\n        defineReadOnly(this, \"functions\", { });\r\n        defineReadOnly(this, \"errors\", { });\r\n        defineReadOnly(this, \"events\", { });\r\n        defineReadOnly(this, \"structs\", { });\r\n\r\n        // Add all fragments by their signature\r\n        this.fragments.forEach((fragment) => {\r\n            let bucket: { [ name: string ]: Fragment } = null;\r\n            switch (fragment.type) {\r\n                case \"constructor\":\r\n                    if (this.deploy) {\r\n                        logger.warn(\"duplicate definition - constructor\");\r\n                        return;\r\n                    }\r\n                    //checkNames(fragment, \"input\", fragment.inputs);\r\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\r\n                    return;\r\n                case \"function\":\r\n                    //checkNames(fragment, \"input\", fragment.inputs);\r\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\r\n                    bucket = this.functions;\r\n                    break;\r\n                case \"event\":\r\n                    //checkNames(fragment, \"input\", fragment.inputs);\r\n                    bucket = this.events;\r\n                    break;\r\n                case \"error\":\r\n                    bucket = this.errors;\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            let signature = fragment.format();\r\n            if (bucket[signature]) {\r\n                logger.warn(\"duplicate definition - \" + signature);\r\n                return;\r\n            }\r\n\r\n            bucket[signature] = fragment;\r\n        });\r\n\r\n        // If we do not have a constructor add a default\r\n        if (!this.deploy) {\r\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\r\n                payable: false,\r\n                type: \"constructor\"\r\n            }));\r\n        }\r\n\r\n        defineReadOnly(this, \"_isInterface\", true);\r\n    }\r\n\r\n    format(format?: string): string | Array<string> {\r\n        if (!format) { format = FormatTypes.full; }\r\n        if (format === FormatTypes.sighash) {\r\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\r\n        }\r\n\r\n        const abi = this.fragments.map((fragment) => fragment.format(format));\r\n\r\n        // We need to re-bundle the JSON fragments a bit\r\n        if (format === FormatTypes.json) {\r\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\r\n        }\r\n\r\n        return abi;\r\n    }\r\n\r\n    // Sub-classes can override these to handle other blockchains\r\n    static getAbiCoder(): AbiCoder {\r\n        return defaultAbiCoder;\r\n    }\r\n\r\n    static getAddress(address: string): string {\r\n        return getAddress(address);\r\n    }\r\n\r\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\r\n        return hexDataSlice(id(fragment.format()), 0, 4);\r\n    }\r\n\r\n    static getEventTopic(eventFragment: EventFragment): string {\r\n        return id(eventFragment.format());\r\n    }\r\n\r\n    // Find a function definition by any means necessary (unless it is ambiguous)\r\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\r\n        if (isHexString(nameOrSignatureOrSighash)) {\r\n            for (const name in this.functions) {\r\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\r\n                    return this.functions[name];\r\n                }\r\n            }\r\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\r\n        }\r\n\r\n        // It is a bare name, look up the function (will return null if ambiguous)\r\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\r\n            const name = nameOrSignatureOrSighash.trim();\r\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\r\n            if (matching.length === 0) {\r\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\r\n            } else if (matching.length > 1) {\r\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\r\n            }\r\n\r\n            return this.functions[matching[0]];\r\n        }\r\n\r\n        // Normalize the signature and lookup the function\r\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\r\n        if (!result) {\r\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Find an event definition by any means necessary (unless it is ambiguous)\r\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\r\n        if (isHexString(nameOrSignatureOrTopic)) {\r\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\r\n            for (const name in this.events) {\r\n                if (topichash === this.getEventTopic(name)) {\r\n                    return this.events[name];\r\n                }\r\n            }\r\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\r\n        }\r\n\r\n        // It is a bare name, look up the function (will return null if ambiguous)\r\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\r\n            const name = nameOrSignatureOrTopic.trim();\r\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\r\n            if (matching.length === 0) {\r\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\r\n            } else if (matching.length > 1) {\r\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\r\n            }\r\n\r\n            return this.events[matching[0]];\r\n        }\r\n\r\n        // Normalize the signature and lookup the function\r\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\r\n        if (!result) {\r\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Find a function definition by any means necessary (unless it is ambiguous)\r\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\r\n        if (isHexString(nameOrSignatureOrSighash)) {\r\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\r\n            for (const name in this.errors) {\r\n                const error = this.errors[name];\r\n                if (nameOrSignatureOrSighash === getSighash(error)) {\r\n                    return this.errors[name];\r\n                }\r\n            }\r\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\r\n        }\r\n\r\n        // It is a bare name, look up the function (will return null if ambiguous)\r\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\r\n            const name = nameOrSignatureOrSighash.trim();\r\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\r\n            if (matching.length === 0) {\r\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\r\n            } else if (matching.length > 1) {\r\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\r\n            }\r\n\r\n            return this.errors[matching[0]];\r\n        }\r\n\r\n        // Normalize the signature and lookup the function\r\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\r\n        if (!result) {\r\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\r\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\r\n        if (typeof(fragment) === \"string\") {\r\n            try {\r\n                fragment = this.getFunction(fragment);\r\n            } catch (error) {\r\n                try {\r\n                    fragment = this.getError(<string>fragment);\r\n                } catch (_) {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n\r\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\r\n    }\r\n\r\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\r\n    getEventTopic(eventFragment: EventFragment | string): string {\r\n        if (typeof(eventFragment) === \"string\") {\r\n            eventFragment = this.getEvent(eventFragment);\r\n        }\r\n\r\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\r\n    }\r\n\r\n\r\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\r\n        return this._abiCoder.decode(params, data)\r\n    }\r\n\r\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\r\n        return this._abiCoder.encode(params, values)\r\n    }\r\n\r\n    encodeDeploy(values?: ReadonlyArray<any>): string {\r\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\r\n    }\r\n\r\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\r\n        if (typeof(fragment) === \"string\") {\r\n            fragment = this.getError(fragment);\r\n        }\r\n\r\n        const bytes = arrayify(data);\r\n\r\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\r\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\r\n        }\r\n\r\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\r\n    }\r\n\r\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\r\n        if (typeof(fragment) === \"string\") {\r\n            fragment = this.getError(fragment);\r\n        }\r\n\r\n        return hexlify(concat([\r\n            this.getSighash(fragment),\r\n            this._encodeParams(fragment.inputs, values || [ ])\r\n        ]));\r\n    }\r\n\r\n    // Decode the data for a function call (e.g. tx.data)\r\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\r\n        if (typeof(functionFragment) === \"string\") {\r\n            functionFragment = this.getFunction(functionFragment);\r\n        }\r\n\r\n        const bytes = arrayify(data);\r\n\r\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\r\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\r\n        }\r\n\r\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\r\n    }\r\n\r\n    // Encode the data for a function call (e.g. tx.data)\r\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\r\n        if (typeof(functionFragment) === \"string\") {\r\n            functionFragment = this.getFunction(functionFragment);\r\n        }\r\n\r\n        return hexlify(concat([\r\n            this.getSighash(functionFragment),\r\n            this._encodeParams(functionFragment.inputs, values || [ ])\r\n        ]));\r\n    }\r\n\r\n    // Decode the result from a function call (e.g. from eth_call)\r\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\r\n        if (typeof(functionFragment) === \"string\") {\r\n            functionFragment = this.getFunction(functionFragment);\r\n        }\r\n\r\n        let bytes = arrayify(data);\r\n\r\n        let reason: string = null;\r\n        let message = \"\";\r\n        let errorArgs: Result = null;\r\n        let errorName: string = null;\r\n        let errorSignature: string = null;\r\n        switch (bytes.length % this._abiCoder._getWordSize()) {\r\n            case 0:\r\n                try {\r\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\r\n                } catch (error) { }\r\n                break;\r\n\r\n            case 4: {\r\n                const selector = hexlify(bytes.slice(0, 4));\r\n                const builtin = BuiltinErrors[selector];\r\n                if (builtin) {\r\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\r\n                    errorName = builtin.name;\r\n                    errorSignature = builtin.signature;\r\n                    if (builtin.reason) { reason = errorArgs[0]; }\r\n                    if (errorName === \"Error\") {\r\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\r\n                    } else if (errorName === \"Panic\") {\r\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\r\n                    }\r\n                } else {\r\n                    try {\r\n                        const error = this.getError(selector);\r\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\r\n                        errorName = error.name;\r\n                        errorSignature = error.format();\r\n                    } catch (error) { }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\r\n            method: functionFragment.format(),\r\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\r\n        });\r\n    }\r\n\r\n    // Encode the result for a function call (e.g. for eth_call)\r\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\r\n        if (typeof(functionFragment) === \"string\") {\r\n            functionFragment = this.getFunction(functionFragment);\r\n        }\r\n\r\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\r\n    }\r\n\r\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\r\n    encodeFilterTopics(eventFragment: EventFragment | string, values: ReadonlyArray<any>): Array<string | Array<string>> {\r\n        if (typeof(eventFragment) === \"string\") {\r\n            eventFragment = this.getEvent(eventFragment);\r\n        }\r\n\r\n        if (values.length > eventFragment.inputs.length) {\r\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\r\n                argument: \"values\",\r\n                value: values\r\n            })\r\n        }\r\n\r\n        let topics: Array<string | Array<string>> = [];\r\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\r\n\r\n        const encodeTopic = (param: ParamType, value: any): string => {\r\n            if (param.type === \"string\") {\r\n                 return id(value);\r\n            } else if (param.type === \"bytes\") {\r\n                 return keccak256(hexlify(value));\r\n            }\r\n\r\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\r\n                value = (value ? \"0x01\": \"0x00\");\r\n            }\r\n\r\n            if (param.type.match(/^u?int/)) {\r\n                value = BigNumber.from(value).toHexString();\r\n            }\r\n\r\n            // Check addresses are valid\r\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\r\n            return hexZeroPad(hexlify(value), 32);\r\n        };\r\n\r\n        values.forEach((value, index) => {\r\n\r\n            let param = (<EventFragment>eventFragment).inputs[index];\r\n\r\n            if (!param.indexed) {\r\n                if (value != null) {\r\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (value == null) {\r\n                topics.push(null);\r\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\r\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\r\n            } else if (Array.isArray(value)) {\r\n                topics.push(value.map((value) => encodeTopic(param, value)));\r\n            } else {\r\n                topics.push(encodeTopic(param, value));\r\n            }\r\n        });\r\n\r\n        // Trim off trailing nulls\r\n        while (topics.length && topics[topics.length - 1] === null) {\r\n            topics.pop();\r\n        }\r\n\r\n        return topics;\r\n    }\r\n\r\n    encodeEventLog(eventFragment: EventFragment | string, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\r\n        if (typeof(eventFragment) === \"string\") {\r\n            eventFragment = this.getEvent(eventFragment);\r\n        }\r\n\r\n        const topics: Array<string> = [ ];\r\n\r\n        const dataTypes: Array<ParamType> = [ ];\r\n        const dataValues: Array<string> = [ ];\r\n\r\n        if (!eventFragment.anonymous) {\r\n            topics.push(this.getEventTopic(eventFragment));\r\n        }\r\n\r\n        if (values.length !== eventFragment.inputs.length) {\r\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\r\n        }\r\n\r\n        eventFragment.inputs.forEach((param, index) => {\r\n            const value = values[index];\r\n            if (param.indexed) {\r\n                if (param.type === \"string\") {\r\n                    topics.push(id(value))\r\n                } else if (param.type === \"bytes\") {\r\n                    topics.push(keccak256(value))\r\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\r\n                    // @TODO\r\n                    throw new Error(\"not implemented\");\r\n                } else {\r\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\r\n                }\r\n            } else {\r\n                dataTypes.push(param);\r\n                dataValues.push(value);\r\n            }\r\n        });\r\n\r\n        return {\r\n            data: this._abiCoder.encode(dataTypes , dataValues),\r\n            topics: topics\r\n        };\r\n    }\r\n\r\n    // Decode a filter for the event and the search criteria\r\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\r\n        if (typeof(eventFragment) === \"string\") {\r\n            eventFragment = this.getEvent(eventFragment);\r\n        }\r\n\r\n        if (topics != null && !eventFragment.anonymous) {\r\n            let topicHash = this.getEventTopic(eventFragment);\r\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\r\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\r\n            }\r\n            topics = topics.slice(1);\r\n        }\r\n\r\n        let indexed: Array<ParamType> = [];\r\n        let nonIndexed: Array<ParamType> = [];\r\n        let dynamic: Array<boolean> = [];\r\n\r\n        eventFragment.inputs.forEach((param, index) => {\r\n            if (param.indexed) {\r\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\r\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\r\n                    dynamic.push(true);\r\n                } else {\r\n                    indexed.push(param);\r\n                    dynamic.push(false);\r\n                }\r\n            } else {\r\n                nonIndexed.push(param);\r\n                dynamic.push(false);\r\n            }\r\n        });\r\n\r\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\r\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\r\n\r\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\r\n        let nonIndexedIndex = 0, indexedIndex = 0;\r\n        eventFragment.inputs.forEach((param, index) => {\r\n            if (param.indexed) {\r\n                if (resultIndexed == null) {\r\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\r\n\r\n                } else if (dynamic[index]) {\r\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\r\n\r\n                } else {\r\n                    try {\r\n                        result[index] = resultIndexed[indexedIndex++];\r\n                    } catch (error) {\r\n                        result[index] = error;\r\n                    }\r\n                }\r\n            } else {\r\n                try {\r\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\r\n                } catch (error) {\r\n                    result[index] = error;\r\n                }\r\n            }\r\n\r\n            // Add the keyword argument if named and safe\r\n            if (param.name && result[param.name] == null) {\r\n                const value = result[index];\r\n\r\n                // Make error named values throw on access\r\n                if (value instanceof Error) {\r\n                    Object.defineProperty(result, param.name, {\r\n                        enumerable: true,\r\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\r\n                    });\r\n                } else {\r\n                    result[param.name] = value;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Make all error indexed values throw on access\r\n        for (let i = 0; i < result.length; i++) {\r\n            const value = result[i];\r\n            if (value instanceof Error) {\r\n                Object.defineProperty(result, i, {\r\n                    enumerable: true,\r\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\r\n                });\r\n            }\r\n        }\r\n\r\n        return Object.freeze(result);\r\n    }\r\n\r\n    // Given a transaction, find the matching function fragment (if any) and\r\n    // determine all its properties and call parameters\r\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\r\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\r\n\r\n        if (!fragment) { return null; }\r\n\r\n        return new TransactionDescription({\r\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\r\n            functionFragment: fragment,\r\n            name: fragment.name,\r\n            signature: fragment.format(),\r\n            sighash: this.getSighash(fragment),\r\n            value: BigNumber.from(tx.value || \"0\"),\r\n        });\r\n    }\r\n\r\n    // @TODO\r\n    //parseCallResult(data: BytesLike): ??\r\n\r\n    // Given an event log, find the matching event fragment (if any) and\r\n    // determine all its properties and values\r\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\r\n        let fragment = this.getEvent(log.topics[0]);\r\n\r\n        if (!fragment || fragment.anonymous) { return null; }\r\n\r\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\r\n        //        Probably not, because just because it is the only event in the ABI does\r\n        //        not mean we have the full ABI; maybe just a fragment?\r\n\r\n\r\n       return new LogDescription({\r\n            eventFragment: fragment,\r\n            name: fragment.name,\r\n            signature: fragment.format(),\r\n            topic: this.getEventTopic(fragment),\r\n            args: this.decodeEventLog(fragment, log.data, log.topics)\r\n        });\r\n    }\r\n\r\n    parseError(data: BytesLike): ErrorDescription {\r\n        const hexData = hexlify(data);\r\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\r\n\r\n        if (!fragment) { return null; }\r\n\r\n        return new ErrorDescription({\r\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\r\n            errorFragment: fragment,\r\n            name: fragment.name,\r\n            signature: fragment.format(),\r\n            sighash: this.getSighash(fragment),\r\n        });\r\n    }\r\n\r\n\r\n    /*\r\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\r\n        if (Interface.isInterface(value)) {\r\n            return value;\r\n        }\r\n        if (typeof(value) === \"string\") {\r\n            return new Interface(JSON.parse(value));\r\n        }\r\n        return new Interface(value);\r\n    }\r\n    */\r\n\r\n    static isInterface(value: any): value is Interface {\r\n        return !!(value && value._isInterface);\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}